/*
MINIMAL ESP32 TEST - Just WiFi and Basic Web Server
Use this if the main firmware keeps rebooting
*/

#include <WiFi.h>
#include <WiFiManager.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <WiFiUdp.h>

AsyncWebServer httpServer(80);
AsyncWebSocket ws("/ws");
WiFiUDP udpListener;
String deviceIP = "";
String connectedServerIP = "";
int connectedServerPort = 0;

void handleUdpDiscovery()
{
    int packetSize = udpListener.parsePacket();
    if (packetSize)
    {
        char packetBuffer[256];
        int len = udpListener.read(packetBuffer, sizeof(packetBuffer) - 1);
        packetBuffer[len] = '\0';

        String message = String(packetBuffer);
        Serial.printf("UDP: %s\n", message.c_str());

        if (message.indexOf("ShackMate") >= 0)
        {
            int firstComma = message.indexOf(',');
            int secondComma = message.indexOf(',', firstComma + 1);

            if (firstComma > 0 && secondComma > firstComma)
            {
                String remoteIP = message.substring(firstComma + 1, secondComma);
                String remotePort = message.substring(secondComma + 1);

                remoteIP.trim();
                remotePort.trim();

                if (remoteIP.length() > 0 && remoteIP != deviceIP)
                {
                    connectedServerIP = remoteIP;
                    connectedServerPort = remotePort.toInt();

                    Serial.printf("Found ShackMate: %s:%d\n", remoteIP.c_str(), connectedServerPort);

                    // Send simple status to web clients
                    String statusMsg = "{\"type\":\"status\",\"civServerConnected\":false,\"civServerIP\":\"" + connectedServerIP + "\",\"civServerPort\":" + String(connectedServerPort) + "}";
                    ws.textAll(statusMsg);
                }
            }
        }
    }
}

void onWsEvent(AsyncWebSocket *server, AsyncWebSocketClient *client, AwsEventType type, void *arg, uint8_t *data, size_t len)
{
    if (type == WS_EVT_CONNECT)
    {
        Serial.printf("WebSocket client connected: %u\n", client->id());

        // Send debug message
        String debugMsg = "{\"type\":\"debug\",\"message\":\"Minimal test firmware - UDP listener active\"}";
        client->text(debugMsg);

        // Send status
        String statusMsg = "{\"type\":\"status\",\"civServerIP\":\"" + connectedServerIP + "\",\"civServerPort\":" + String(connectedServerPort) + "}";
        client->text(statusMsg);
    }
}

void setup()
{
    Serial.begin(115200);
    delay(3000);

    Serial.println("=== MINIMAL ESP32 TEST ===");

    WiFiManager wifiManager;
    if (!wifiManager.autoConnect("ShackMate-Test"))
    {
        Serial.println("Failed to connect");
        ESP.restart();
    }

    deviceIP = WiFi.localIP().toString();
    Serial.println("IP: " + deviceIP);

    // Start UDP listener
    udpListener.begin(4210);
    Serial.println("UDP listener on port 4210");

    // Start web server
    ws.onEvent(onWsEvent);
    httpServer.addHandler(&ws);

    httpServer.on("/", HTTP_GET, [](AsyncWebServerRequest *request)
                  {
    String html = "<!DOCTYPE html><html><head><title>Minimal Test</title></head><body>";
    html += "<h1>ESP32 Minimal Test</h1>";
    html += "<p>Device IP: " + deviceIP + "</p>";
    html += "<p>UDP Listener: Port 4210</p>";
    html += "<p>Status: Running</p>";
    html += "<script>";
    html += "const ws = new WebSocket('ws://' + location.hostname + '/ws');";
    html += "ws.onmessage = function(ev) { console.log('WS:', ev.data); };";
    html += "</script>";
    html += "</body></html>";
    request->send(200, "text/html", html); });

    httpServer.begin();
    Serial.println("Web server started");
    Serial.println("=== SETUP COMPLETE ===");
}

void loop()
{
    delay(100);
    handleUdpDiscovery();

    static unsigned long lastPrint = 0;
    if (millis() - lastPrint > 10000) // Every 10 seconds
    {
        lastPrint = millis();
        Serial.println("Running... Free heap: " + String(ESP.getFreeHeap()));
    }
}
